'use client';

import React, { useState } from 'react';
import { X, GripVertical } from 'lucide-react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Skill } from '@/lib/interfaces';

export default function Skills() {
  const [skills, setSkills] = useState<Skill[]>([
    {
      id: '1',
      portfolioId: 'mock-portfolio-id',
      name: 'JavaScript',
      category: 'Frontend',
      proficiencyLevel: 95,
      displayOrder: 1,
      createdAt: '2024-01-15T10:00:00Z',
      updatedAt: '2024-01-15T10:00:00Z'
    },
    {
      id: '2',
      portfolioId: 'mock-portfolio-id',
      name: 'React',
      category: 'Frontend',
      proficiencyLevel: 90,
      displayOrder: 2,
      createdAt: '2024-01-15T10:00:00Z',
      updatedAt: '2024-01-15T10:00:00Z'
    },
    {
      id: '3',
      portfolioId: 'mock-portfolio-id',
      name: 'Node.js',
      category: 'Backend',
      proficiencyLevel: 85,
      displayOrder: 3,
      createdAt: '2024-01-15T10:00:00Z',
      updatedAt: '2024-01-15T10:00:00Z'
    },
    {
      id: '4',
      portfolioId: 'mock-portfolio-id',
      name: 'TypeScript',
      category: 'Frontend',
      proficiencyLevel: 88,
      displayOrder: 4,
      createdAt: '2024-01-15T10:00:00Z',
      updatedAt: '2024-01-15T10:00:00Z'
    }
  ]);
  
  const [newSkill, setNewSkill] = useState('');
  const [newCategory, setNewCategory] = useState('Frontend');
  const [newProficiency, setNewProficiency] = useState(50);
  
  const categories = ['Frontend', 'Backend', 'Database', 'DevOps', 'Mobile', 'Design', 'Other'];

  const addSkill = () => {
    if (newSkill.trim() && !skills.some(skill => skill.name.toLowerCase() === newSkill.trim().toLowerCase())) {
      const newSkillObj: Skill = {
        id: Date.now().toString(), // In real app, this would be generated by backend
        portfolioId: 'mock-portfolio-id',
        name: newSkill.trim(),
        category: newCategory,
        proficiencyLevel: newProficiency,
        displayOrder: skills.length + 1,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };
      setSkills([...skills, newSkillObj]);
      setNewSkill('');
      setNewProficiency(50);
    }
  };

  const removeSkill = (skillId: string) => {
    setSkills(skills.filter(skill => skill.id !== skillId));
  };

  const moveSkill = (index: number, direction: 'up' | 'down') => {
    const newSkills = [...skills];
    const targetIndex = direction === 'up' ? index - 1 : index + 1;
    
    if (targetIndex < 0 || targetIndex >= newSkills.length) return;
    
    // Swap elements
    [newSkills[index], newSkills[targetIndex]] = [newSkills[targetIndex], newSkills[index]];
    
    // Update display order
    newSkills.forEach((skill, idx) => {
      skill.displayOrder = idx + 1;
      skill.updatedAt = new Date().toISOString();
    });
    
    setSkills(newSkills);
  };

  const updateSkillProficiency = (skillId: string, newLevel: number) => {
    setSkills(skills.map(skill => 
      skill.id === skillId 
        ? { ...skill, proficiencyLevel: newLevel, updatedAt: new Date().toISOString() }
        : skill
    ));
  };

  const updateSkillCategory = (skillId: string, newCat: string) => {
    setSkills(skills.map(skill => 
      skill.id === skillId 
        ? { ...skill, category: newCat, updatedAt: new Date().toISOString() }
        : skill
    ));
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      addSkill();
    }
  };

  return (
    <div className="bg-white rounded-lg shadow-sm p-4 sm:p-6 lg:p-8 w-full min-h-[600px]">
      <h1 className="text-xl sm:text-2xl font-semibold text-gray-900 mb-4 sm:mb-6">Skills</h1>
      <p className="text-sm sm:text-base text-gray-600 mb-6 sm:mb-8">Add and manage your technical skills</p>
      
      <div className="w-full max-w-[800px] space-y-4 sm:space-y-6">
        {/* Add Skill Section */}
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 p-4 bg-gray-50 rounded-lg">
          <div className="flex flex-col gap-2">
            <label className="text-sm font-medium text-gray-700">Skill Name</label>
            <Input
              type="text"
              placeholder="e.g. React"
              value={newSkill}
              onChange={(e) => setNewSkill(e.target.value)}
              onKeyPress={handleKeyPress}
              className="w-full"
            />
          </div>
          
          <div className="flex flex-col gap-2">
            <label className="text-sm font-medium text-gray-700">Category</label>
            <Select value={newCategory} onValueChange={setNewCategory}>
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                {categories.map((category) => (
                  <SelectItem key={category} value={category}>
                    {category}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          
          <div className="flex flex-col gap-2">
            <label className="text-sm font-medium text-gray-700">Proficiency ({newProficiency}%)</label>
            <input
              type="range"
              min="1"
              max="100"
              value={newProficiency}
              onChange={(e) => setNewProficiency(Number(e.target.value))}
              className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
            />
          </div>
          
          <div className="flex flex-col gap-2 justify-end">
            <Button
              onClick={addSkill}
              className="w-full px-4 py-2 bg-[#2563EB] hover:bg-[#1d4ed8] text-white text-sm font-normal rounded-lg"
            >
              Add Skill
            </Button>
          </div>
        </div>

        {/* Skills Display */}
        <div className="space-y-4">
          {skills.map((skill, index) => (
            <div
              key={skill.id}
              className="p-4 bg-white rounded-lg border border-gray-200 shadow-sm"
            >
              <div className="flex items-center justify-between mb-3">
                <div className="flex items-center gap-3">
                  <GripVertical className="w-4 h-4 text-gray-400 cursor-grab" />
                  <div>
                    <h3 className="text-sm font-medium text-gray-900">{skill.name}</h3>
                    <p className="text-xs text-gray-500">{skill.category}</p>
                  </div>
                </div>
                
                <div className="flex items-center gap-2">
                  {/* Move Up/Down Buttons */}
                  <button
                    onClick={() => moveSkill(index, 'up')}
                    disabled={index === 0}
                    className="p-1 text-gray-600 hover:text-gray-800 disabled:text-gray-300 disabled:cursor-not-allowed"
                    title="Move up"
                  >
                    ↑
                  </button>
                  <button
                    onClick={() => moveSkill(index, 'down')}
                    disabled={index === skills.length - 1}
                    className="p-1 text-gray-600 hover:text-gray-800 disabled:text-gray-300 disabled:cursor-not-allowed"
                    title="Move down"
                  >
                    ↓
                  </button>
                  
                  <button
                    onClick={() => removeSkill(skill.id)}
                    className="p-1 text-red-600 hover:text-red-800 transition-colors"
                    title="Remove skill"
                  >
                    <X className="w-4 h-4" />
                  </button>
                </div>
              </div>
              
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                {/* Category Selector */}
                <div className="flex flex-col gap-2">
                  <label className="text-xs font-medium text-gray-700">Category</label>
                  <Select value={skill.category} onValueChange={(value) => updateSkillCategory(skill.id, value)}>
                    <SelectTrigger className="h-8 text-sm">
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {categories.map((category) => (
                        <SelectItem key={category} value={category}>
                          {category}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                
                {/* Proficiency Slider */}
                <div className="flex flex-col gap-2">
                  <label className="text-xs font-medium text-gray-700">
                    Proficiency: {skill.proficiencyLevel}%
                  </label>
                  <input
                    type="range"
                    min="1"
                    max="100"
                    value={skill.proficiencyLevel}
                    onChange={(e) => updateSkillProficiency(skill.id, Number(e.target.value))}
                    className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer"
                  />
                </div>
              </div>
            </div>
          ))}
          
          {skills.length === 0 && (
            <div className="text-center py-8 text-gray-500">
              No skills added yet. Add your first skill above!
            </div>
          )}
        </div>
      </div>
    </div>
  );
} 