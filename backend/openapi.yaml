openapi: 3.0.3
info:
  title: Portfolio Platform API
  version: 1.0.0
  description: API Gateway routing to microservices for user, portfolio, messaging, integration, and AI features.

servers:
  - url: https://api.example.com/v1

paths:
  # User & Admin Service
  /auth/login:
    post:
      summary: User login (supports OAuth)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /auth/register:
    post:
      summary: User registration
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{id}:
    get:
      summary: Get user profile
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update user profile
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated
    delete:
      summary: Delete user account
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: User deleted
  /admin/users:
    get:
      summary: Admin - list all users
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /admin/users/{id}/block:
    put:
      summary: Admin - block user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User blocked
  /admin/users/{id}/unblock:
    put:
      summary: Admin - unblock user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User unblocked

  # Portfolio/Template/Export/Bookmark/Search Service
  /portfolios:
    get:
      summary: List all portfolios
      responses:
        '200':
          description: List of portfolios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Portfolio'
    post:
      summary: Create new portfolio
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioCreate'
      responses:
        '201':
          description: Portfolio created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
  /portfolios/{id}:
    get:
      summary: Get portfolio by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Portfolio details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Portfolio'
    put:
      summary: Update portfolio
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PortfolioUpdate'
      responses:
        '200':
          description: Portfolio updated
    delete:
      summary: Delete portfolio
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Portfolio deleted
  /templates:
    get:
      summary: List available templates
      responses:
        '200':
          description: List of templates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Template'
    post:
      summary: Create new template
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TemplateCreate'
      responses:
        '201':
          description: Template created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
  /templates/{id}:
    get:
      summary: Get template by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Template details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Template'
  /portfolios/{id}/export:
    post:
      summary: Export portfolio (PDF or link)
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                format:
                  type: string
                  enum: [pdf, link]
      responses:
        '200':
          description: Exported file or link
          content:
            application/pdf:
              schema:
                type: string
                format: binary
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
  /portfolios/{id}/bookmark:
    post:
      summary: Bookmark a portfolio
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Portfolio bookmarked
  /bookmarks:
    get:
      summary: List user bookmarks
      responses:
        '200':
          description: List of bookmarks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bookmark'
  /search:
    get:
      summary: Search/filter portfolios
      parameters:
        - in: query
          name: q
          schema:
            type: string
        - in: query
          name: skills
          schema:
            type: string
        - in: query
          name: tags
          schema:
            type: string
      responses:
        '200':
          description: Search results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Portfolio'

  # Messages & Notifications Service
  /messages:
    get:
      summary: List user messages
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
    post:
      summary: Send a message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageCreate'
      responses:
        '201':
          description: Message sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  /messages/{id}:
    get:
      summary: Get message by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Message details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
  /notifications:
    get:
      summary: List user notifications
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'
    post:
      summary: Create notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationCreate'
      responses:
        '201':
          description: Notification created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Notification'
  /notifications/{id}/read:
    put:
      summary: Mark notification as read
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Notification marked as read

  # Integration Service
  /integrations/github/import:
    post:
      summary: Import projects from GitHub
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Projects imported
  /integrations/linkedin/import:
    post:
      summary: Import data from LinkedIn
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
      responses:
        '200':
          description: Data imported
  /integrations:
    get:
      summary: List connected integrations
      responses:
        '200':
          description: List of integrations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Integration'

  # AI Service
  /ai/top-portfolios:
    get:
      summary: Get top 10 portfolios (AI ranking)
      responses:
        '200':
          description: Top portfolios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AIRanking'
  /ai/retrain:
    post:
      summary: Retrain AI model (admin only)
      responses:
        '200':
          description: AI retrained

components:
  schemas:
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
        provider:
          type: string
          enum: [google, facebook]
        token:
          type: string
    RegisterRequest:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
    User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        avatar:
          type: string
        roles:
          type: array
          items:
            type: string
        status:
          type: string
    UserUpdate:
      type: object
      properties:
        name:
          type: string
        avatar:
          type: string
    Portfolio:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        skills:
          type: array
          items:
            type: string
        achievements:
          type: array
          items:
            type: string
        templateId:
          type: string
    PortfolioCreate:
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        skills:
          type: array
          items:
            type: string
        achievements:
          type: array
          items:
            type: string
        templateId:
          type: string
    PortfolioUpdate:
      type: object
      properties:
        projects:
          type: array
          items:
            $ref: '#/components/schemas/Project'
        skills:
          type: array
          items:
            type: string
        achievements:
          type: array
          items:
            type: string
        templateId:
          type: string
    Project:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        link:
          type: string
    Template:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        layout:
          type: string
        preview:
          type: string
    TemplateCreate:
      type: object
      properties:
        name:
          type: string
        layout:
          type: string
        preview:
          type: string
    Bookmark:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        portfolioId:
          type: string
    Message:
      type: object
      properties:
        id:
          type: string
        fromUserId:
          type: string
        toUserId:
          type: string
        content:
          type: string
        timestamp:
          type: string
          format: date-time
    MessageCreate:
      type: object
      properties:
        toUserId:
          type: string
        content:
          type: string
    Notification:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        message:
          type: string
        read:
          type: boolean
        timestamp:
          type: string
          format: date-time
    NotificationCreate:
      type: object
      properties:
        userId:
          type: string
        message:
          type: string
    Integration:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        provider:
          type: string
        status:
          type: string
    AIRanking:
      type: object
      properties:
        portfolioId:
          type: string
        score:
          type: number
        rank:
          type: integer